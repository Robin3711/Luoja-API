stages:
  - docker
  - deploy  
  - tests
  - pages  

docker:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  script:
    - cp -r ./app ./docker/
    - cd docker
    - docker login -u gitlab-ci -p $DOCKER_REGISTRY_PASSWORD docker.luoja.fr
    - docker build --build-arg JWT_SECRET=$JWT_SECRET -t mimir .
    - docker tag mimir docker.luoja.fr/mimir
    - docker push docker.luoja.fr/mimir
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release"

deploy:
  stage: deploy
  needs:
    - docker
  image: ubuntu:latest
  variables:
    SECURE_FILES_DOWNLOAD_PATH: ".ssh/"
  script:
    - cd /root
    - apt update -y
    - apt install -y curl openssh-client
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - chmod 600 /root/.ssh/id_rsa
    - ssh-keyscan -H luoja.fr >> /root/.ssh/known_hosts
    - ssh ubuntu@luoja.fr "sudo docker kill mimir || true"
    - ssh ubuntu@luoja.fr "sudo docker rm mimir || true"
    - ssh ubuntu@luoja.fr "sudo docker rmi docker.luoja.fr/mimir || true"
    - ssh ubuntu@luoja.fr "sudo docker run -d --restart always --name mimir --network internal_network -e PROTOCOL=HTTPS -e DOMAIN=luoja.fr -v /etc/letsencrypt:/etc/letsencrypt:ro -v /srv/mimir/:/usr/src/app/prisma/db/ -v /srv/mimir/uploads:/usr/src/app/uploads docker.luoja.fr/mimir"

lint:
  when: always
  stage: tests
  image: node:latest
  allow_failure: true
  script:
    - cd app
    - npm install    
    - npm install --save-dev eslint @eslint/js @types/eslint__js typescript typescript-eslint
    - npm install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin
    - npx eslint ./src/**/*.ts ./src/*.ts --output-file lint_report.html --format html
  artifacts:
    paths:
      - app/lint_report.html 
    expire_in: 30 days
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"

test:
  when: always
  stage: tests
  image: node:latest
  script:
    - cd app
    - npm install
    - npm install --save-dev jest jest-html-reporter  
    - npx jest --reporters=default --reporters=jest-html-reporter  
  artifacts:
    paths:
      - app/test-report.html 
    expire_in: 30 days
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"

pages:  
  stage: pages
  image: alpine:latest
  script:
    - mkdir -p public
    - echo "<html><body><h1>Rapport de Linting et de Test</h1>" > public/index.html
    - |
      if [ -f app/lint_report.html ]; then
        cp app/lint_report.html public/lint_report.html
        echo "<h2><a href='lint_report.html'>Voir le Rapport de Linting</a></h2>" >> public/index.html
      else
        echo "<h2>Rapport de Linting non disponible</h2>" >> public/index.html
      fi
    - |
      if [ -f app/test-report.html ]; then  # Utilisation du rapport HTML des tests
        cp app/test-report.html public/test-report.html
        echo "<h2><a href='test-report.html'>Voir le Rapport de Test</a></h2>" >> public/index.html
      else
        echo "<h2>Rapport de Test non disponible</h2>" >> public/index.html
      fi
    - echo "</body></html>" >> public/index.html
  artifacts:
    paths:
      - public
    expire_in: 30 days
    when: always
  rules:
  - if: $CI_COMMIT_BRANCH == "dev"
